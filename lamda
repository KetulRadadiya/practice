import boto3
import json

ec2 = boto3.client('ec2')
ssm = boto3.client('ssm')
cfn = boto3.client('cloudformation')

def get_ami_creation_date(ami_id):
    response = ec2.describe_images(ImageIds=[ami_id])
    return response['Images'][0]['CreationDate']

def lambda_handler(event, context):
    instance_ami_id = event['ami_id']
    ssm_param_name = event['ssm_param_name']
    stack_name = event['stack_name']

    # Get current SSM parameter value
    ssm_ami_id = ssm.get_parameter(Name=ssm_param_name)['Parameter']['Value']

    # Get creation dates
    instance_ami_date = get_ami_creation_date(instance_ami_id)
    ssm_ami_date = get_ami_creation_date(ssm_ami_id)

    print(f"Instance AMI: {instance_ami_id} ({instance_ami_date})")
    print(f"SSM AMI: {ssm_ami_id} ({ssm_ami_date})")

    if ssm_ami_date >= instance_ami_date:
        print("SSM AMI is up to date.")
        return {
            'status': 'no_update_needed',
            'message': 'SSM AMI is already up to date.'
        }

    print("Instance AMI is newer. Updating CloudFormation stack...")

    try:
        # Update CloudFormation stack using boto3
        # response = cfn.update_stack(
        #     StackName=stack_name,
        #     UsePreviousTemplate=True,
        #     Capabilities=['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM'],
        #     Parameters=[
        #         {
        #             'ParameterKey': 'AMIId',
        #             'ParameterValue': instance_ami_id,
        #             'UsePreviousValue': False
        #         }
        #     ]
        # )

        print("CloudFormation stack update initiated.")
        
        # Update SSM parameter with new AMI ID
        ssm.put_parameter(
            Name=ssm_param_name,
            Value=instance_ami_id,
            Type='String',
            Overwrite=True
        )
        print("SSM parameter updated with new AMI ID.")

        return {
            'status': 'success',
            'message': 'CloudFormation stack and SSM parameter updated successfully.',
            'new_ami_id': instance_ami_id
        }

    except cfn.exceptions.ClientError as e:
        error_msg = str(e)
        print(f"Failed to update CloudFormation stack: {error_msg}")

        return {
            'status': 'error',
            'message': 'CloudFormation stack update failed.',
            'error': error_msg
        }
